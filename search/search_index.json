{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#updates2mqtt","title":"updates2mqtt","text":""},{"location":"#summary","title":"Summary","text":"<p>Use Home Assistant to notify you of updates to Docker images for your containers and optionally perform the pull (or optionally build) and update.</p> <p></p>"},{"location":"#description","title":"Description","text":"<p>updates2mqtt perioidically checks for new versions of components being available, and publishes new version info to MQTT. HomeAssistant auto discovery is supported, so all updates can be seen in the same place as Home Assistant\u2019s own components and add-ins.</p> <p>Currently only Docker containers are supported, either via an image registry check, or a git repo for source. The design is modular, so other update sources can be added, at least for notification. The next anticipated is apt for Debian based systems.</p> <p>Components can also be updated, either automatically or triggered via MQTT, for example by hitting the Install button in the HomeAssistant update dialog. Icons and release notes can be specified for a better HA experience.</p>"},{"location":"#install","title":"Install","text":"<p>updates2mqtt prefers to be run inside a Docker container.</p>"},{"location":"#manual","title":"Manual","text":"<pre><code>uv sync\nuv run updates2mqtt\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>See <code>examples</code> directory for a working <code>docker-compose.yaml</code>.</p> <p>If you want to update and restart containers, then the file system paths to the location of the directory where the docker compose file lives must be available in the updates2mqtt container. </p> <p>The example <code>docker-compose.yaml</code> mounts <code>/home/containers</code> for this purpose, so if your containers are in <code>/home/containers/app1</code>, <code>/home/containers/app2</code> etc, then updates2mqtt will be able to find them. Map as many root paths as needed.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>Create file <code>config.yaml</code> in <code>conf</code> directory. If the file is not present, a default file will be generated.</p>"},{"location":"#example-configuration-file","title":"Example configuration file","text":"<p>This is a maximal config file, the minimum is no config file at all, which will generate a default config file. The only mandatory values are the MQTT user name and password, everything else can be omitted.</p> <pre><code>node:\n  name: docker-host-1 # Unique name for this instance, used to name MQTT entities. Defaults to O/S hostname\n  git_repo_path: /usr/bin/git # Path to git inside container, needed only if non-default and using local docker builds\n  healthcheck:\n    enabled: true\n    interval: 300 # publish a heartbeat every 5 minutes\n    topic_template: healthcheck/{node_name}/updates2mqtt\nmqtt:\n  host: ${oc.env:MQTT_HOST}\n  user: ${oc.env:MQTT_USER}\n  password: ${oc.env:MQTT_PASS}$ # Use an environment variable for secrets\n  port: ${oc.env:MQTT_PORT}\n  topic_root: updates2mqtt\nhomeassistant:\n  discovery:\n    prefix: homeassistant # Matches the default MQTT discovery prefix in Home Assistant\n    enabled: true\n  state_topic_suffix: state\ndocker:\n  enabled: true\n  allow_pull: true # if true, will do a `docker pull` if an update is available\n  allow_restart: true # if true, will do a `docker-compose up` if an update is installed\n  allow_build: true # if true, will do a `docker-compose build` if a git repo is configured\n  compose_version: v2 # Controls whether to use `docker-compose` (v1) or `docker compose` (v2) command\n  default_entity_picture_url: https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png # Picture for update dialog\n  device_icon: mdi:docker # Material Design Icon to use when browsing entities in Home Assistant\n  # device_icon: mdi:train-car-container # Alternative icon if you don't like Docker branding\n  discover_metadata:\n    linuxserver.io:\n      enabled: true\n      cache_ttl: 604800 # cache metadata for 1 week\nscan_interval: 10800 # sleep interval between scan runs, in seconds\nlog:\n  level: INFO\n</code></pre>"},{"location":"#moving-secrets-out-of-config","title":"Moving Secrets Out of Config","text":"<p>Example use of environment variables, e.g. for secrets:</p> <pre><code>mqtt:\n    password: ${oc.env:MQTT_PASS}\n</code></pre>"},{"location":"#customizing-images-and-release-notes","title":"Customizing images and release notes","text":"<p>Individual docker containers can have customized entity pictures or release notes, using env variables, for example in the <code>docker-compose.yaml</code> or in a separate <code>.env</code> file:</p> <pre><code>    environment:\n      - UPD2MQTT_PICTURE=https://frigate.video/images/logo.svg\n      - UPD2MQTT_RELNOTES=https://github.com/blakeblackshear/frigate/releases\n</code></pre> <p>The images will show up in the Update section of Settings menu in HomeAssistant, as will the release notes link. SVG icons should be used.</p> <p>Some popular services have the icon and release note links pre-configured, in <code>common_packages.yaml</code>, and packages from <code>linuxserver.io</code> can have metadata automatically discovered.</p>"},{"location":"#icon-sources","title":"Icon Sources","text":"<ul> <li>Homarr Dashboard Icons</li> <li>Self Hosted Icons</li> <li>Simple Icons</li> <li>Tabler Icons</li> <li>Papirus Icons</li> <li>Homelab SVG Assets</li> </ul>"},{"location":"#automated-updates","title":"Automated updates","text":"<p>If Docker containers should be immediately updated, without any confirmation or trigger, e.g. from the HomeAssistant update dialog, then set an environment variable <code>UPD2MQTT_UPDATE</code> in the target container to <code>Auto</code> ( it defaults to <code>Passive</code>)</p>"},{"location":"#custom-docker-builds","title":"Custom docker builds","text":"<p>If the image is locally built from a checked out git repo, package update can be driven by the availability of git repo changes to pull rather than a new image on a Docker registry.</p> <p>Declare the git path using the env var in <code>UPD2MQTT_GIT_REPO_PATH</code> in the docker container ( directly or via an <code>.env</code> file). The git repo at this path will be used as the source of timestamps, and an update command will carry out a  <code>git pull</code> and <code>docker-compose build</code> rather than pulling an image.</p> <p>Note that the updates2mqtt docker container needs access to this path declared in its volumes, and that has to be read/write if automated install required.</p>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>The following environment variables can be used to configure updates2mqtt:</p> Env Var Description Default <code>UPD2MQTT_UPDATE</code> Update mode, either <code>Passive</code> or <code>Auto</code>. If <code>Auto</code>, updates will be installed automatically. <code>Passive</code> <code>UPD2MQTT_PICTURE</code> URL to an icon to use in Home Assistant. Docker logo URL <code>UPD2MQTT_RELNOTES</code> URL to release notes for the package. <code>UPD2MQTT_GIT_REPO_PATH</code> Relative path to a local git repo if the image is built locally. <code>UPD2MQTT_IGNORE</code> If set to <code>True</code>, the container will be ignored by updates2mqtt. False"},{"location":"#release-support","title":"Release Support","text":"Ecosystem Support Comments Docker Scan. Fetch Fetch is <code>docker pull</code> only. Restart support only for <code>docker-compose</code> image based containers."},{"location":"#healthcheck","title":"Healthcheck","text":"<p>A heartbeat JSON payload is optionally published periodically to a configurable MQTT topic, defaulting to <code>healthcheck/{node_name}/updates2mqtt</code>. It contains the current version of updates2mqtt, the node name, a timestamp, and some basic stats.</p> <p>A <code>healthcheck.sh</code> script is included in the Docker image, and can be used as a Docker healthcheck, if the container environment variables are set for <code>MQTT_HOST</code>, <code>MQTT_PORT</code>, <code>MQTT_USER</code> and <code>MQTT_PASS</code>.</p> <p>TIP: Check healthcheck is working using <code>docker inspect --format \"{{json .State.Health }}\" updates2mqtt | jq</code></p>"},{"location":"#homeassistant-integration","title":"HomeAssistant integration","text":"<p>Any updates that have support for automated install will automatically show in the Home Assistant settings page if the MQTT Integration is installed and automatic discovery is not disabled.</p> <p></p> <p>The <code>homeassistant</code> default topic prefix matches the default updates2mqtt config, if its changed in HomeAssistant, then the updates2mqtt config must be changed to match.</p> <p></p> <p>For Home Assistant integration, updates2mqtt represents each component being managed as a MQTT Update entity, and uses [MQTT discovery(https://www.home-assistant.io/integrations/mqtt/#mqtt-discovery)] so that HomeAssistant automatically picks up components discovered by updates2mqtt with zero configuration on HomeAssistant itself. </p> <p>There are 3 separate types of MQTT topic used for HomeAssisstant integration:</p> <ul> <li>Config to support auto discovery. A topic is created per component, with a name like <code>homeassistant/update/dockernuc_docker_jellyfin/update/config</code>. This can be disabled in the config file, and the <code>homeassistant</code> topic prefix can also be configured.</li> <li>State to report the current version and the latest version available, again one topic per component, like <code>updates2mqtt/dockernuc/docker/jellyfin</code>.</li> <li>Command to support triggering an update. These will be created on the fly by HomeAssistant when an update is requested, and updates2mqtt subscribes to pick up the changes, so you won\u2019t typically see these if browsing MQTT topics. Only one is needed per updates2mqtt agent, with a name like <code>updates2mqtt/dockernuc/docker</code></li> </ul> <p>If the package supports automated update, then Skip and Install buttons will appear on the Home Assistant interface, and the package can be remotely fetched and the component restarted.</p>"},{"location":"#related-projects","title":"Related Projects","text":""},{"location":"#-psmqtt-report-system-health-and-metrics-via-mqtt","title":"- psmqtt - Report system health and metrics via MQTT","text":""},{"location":"#development","title":"Development","text":"<p>Access to Docker APIs uses the Python docker-py SDK for Python. Eclipse Paho is used for MQTT access, and OmegaConf for configuration.</p>"}]}